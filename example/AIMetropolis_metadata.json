{
  "authors": [
    {
      "name": "Zhiqiang Xie",
      "affiliations": [
        1
      ]
    },
    {
      "name": "Hao Kang",
      "affiliations": [
        2
      ]
    },
    {
      "name": "Ying Sheng",
      "affiliations": [
        1
      ]
    },
    {
      "name": "Tushar Krishna",
      "affiliations": [
        2
      ]
    },
    {
      "name": "Kayvon Fatahalian",
      "affiliations": [
        1
      ]
    },
    {
      "name": "Christos Kozyrakis",
      "affiliations": [
        1
      ]
    }
  ],
  "affiliations": [
    {
      "id": 1,
      "name": "Stanford University"
    },
    {
      "id": 2,
      "name": "Georgia Institute of Technology"
    }
  ],
  "keywords": [
    "large language models",
    "multi-agent simulations",
    "parallelism",
    "out-of-order execution",
    "agent simulation",
    "efficiency",
    "performance optimization",
    "hardware utilization"
  ],
  "title": "AI METROPOLIS: SCALING LARGE LANGUAGE MODEL-BASED MULTI-AGENT SIMULATION WITH OUT-OF-ORDER EXECUTION",
  "abstract": "With more advanced natural language understanding and reasoning capabilities, agents powered by large language models (LLMs) are increasingly developed in simulated environments to perform complex tasks, interact with other agents, and exhibit emerging behaviors relevant to social science research and innovative gameplay development. However, current multi-agent simulations frequently suffer from inefficiencies due to the limited parallelism caused by false dependencies, resulting in a performance bottleneck. In this paper, we introduce AI Metropolis, a simulation engine that improves the efficiency of LLM agent simulations by incorporating out-of-order execution scheduling. By dynamically tracking real dependencies between agents, AI Metropolis minimizes false dependencies, enhances parallelism, and maximizes hardware utilization. Our evaluations demonstrate that AI Metropolis achieves speedups from 1.3\u00d7 to 4.15\u00d7 over standard parallel simulation with global synchronization, approaching optimal performance as the number of agents increases."
}